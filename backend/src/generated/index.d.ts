/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as ctx from "../context"
import { core, connectionPluginCore } from "@nexus/schema"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    connectionField<FieldName extends string>(
            fieldName: FieldName, 
            config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName> 
          ): void
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateConversationInput: { // input type
    participantIds?: string[] | null; // [ID!]
    title: string; // String!
  }
  CreateMessageInput: { // input type
    conversationId: string; // ID!
    message: string; // String!
  }
  InvitePeopleInput: { // input type
    conversationId: string; // ID!
    participantIds: string[]; // [ID!]!
  }
  LoginInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  RemovePeopleInput: { // input type
    conversationId: string; // ID!
    participantIds: string[]; // [ID!]!
  }
  SignupInput: { // input type
    avatar?: string | null; // String
    email: string; // String!
    name?: string | null; // String
    password: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenRootTypes {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Conversation: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  ConversationConnection: { // root type
    edges?: Array<NexusGenRootTypes['ConversationEdge'] | null> | null; // [ConversationEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  ConversationEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Conversation']; // Conversation!
  }
  ConversationSubscriptionPayload: { // root type
    conversationId: string; // ID!
    message: NexusGenRootTypes['Message']; // Message!
  }
  CreateConversationPayload: { // root type
    conversation: NexusGenRootTypes['Conversation']; // Conversation!
  }
  CreateMessagePayload: { // root type
    conversationId: string; // ID!
    message: NexusGenRootTypes['Message']; // Message!
  }
  InvitePeoplePayload: { // root type
    conversation: NexusGenRootTypes['Conversation']; // Conversation!
    conversationId: string; // ID!
    participantIds: string[]; // [ID!]!
  }
  Message: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    message: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  MessageConnection: { // root type
    edges?: Array<NexusGenRootTypes['MessageEdge'] | null> | null; // [MessageEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  MessageEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Message']; // Message!
  }
  Mutation: {};
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Participant: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  ParticipantConnection: { // root type
    edges?: Array<NexusGenRootTypes['ParticipantEdge'] | null> | null; // [ParticipantEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  ParticipantEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Participant']; // Participant!
  }
  Query: {};
  RemovePeoplePayload: { // root type
    conversation: NexusGenRootTypes['Conversation']; // Conversation!
    conversationId: string; // ID!
    participantIds: string[]; // [ID!]!
  }
  Subscription: {};
  User: { // root type
    avatar?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    name?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UserConnection: { // root type
    edges?: Array<NexusGenRootTypes['UserEdge'] | null> | null; // [UserEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  UserEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['User']; // User!
  }
  Node: NexusGenRootTypes['Conversation'] | NexusGenRootTypes['Message'] | NexusGenRootTypes['Participant'] | NexusGenRootTypes['User'];
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  CreateConversationInput: NexusGenInputs['CreateConversationInput'];
  CreateMessageInput: NexusGenInputs['CreateMessageInput'];
  InvitePeopleInput: NexusGenInputs['InvitePeopleInput'];
  LoginInput: NexusGenInputs['LoginInput'];
  RemovePeopleInput: NexusGenInputs['RemovePeopleInput'];
  SignupInput: NexusGenInputs['SignupInput'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  DateTime: NexusGenScalars['DateTime'];
}

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Conversation: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['User']; // User!
    id: string; // ID!
    messageConnection: NexusGenRootTypes['MessageConnection']; // MessageConnection!
    participantConnection: NexusGenRootTypes['ParticipantConnection']; // ParticipantConnection!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  ConversationConnection: { // field return type
    edges: Array<NexusGenRootTypes['ConversationEdge'] | null> | null; // [ConversationEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  ConversationEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Conversation']; // Conversation!
  }
  ConversationSubscriptionPayload: { // field return type
    conversationId: string; // ID!
    message: NexusGenRootTypes['Message']; // Message!
  }
  CreateConversationPayload: { // field return type
    conversation: NexusGenRootTypes['Conversation']; // Conversation!
  }
  CreateMessagePayload: { // field return type
    conversationId: string; // ID!
    message: NexusGenRootTypes['Message']; // Message!
  }
  InvitePeoplePayload: { // field return type
    conversation: NexusGenRootTypes['Conversation']; // Conversation!
    conversationId: string; // ID!
    participantIds: string[]; // [ID!]!
  }
  Message: { // field return type
    conversation: NexusGenRootTypes['Conversation']; // Conversation!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    message: string; // String!
    sender: NexusGenRootTypes['User']; // User!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  MessageConnection: { // field return type
    edges: Array<NexusGenRootTypes['MessageEdge'] | null> | null; // [MessageEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  MessageEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Message']; // Message!
  }
  Mutation: { // field return type
    createConversation: NexusGenRootTypes['CreateConversationPayload']; // CreateConversationPayload!
    createMessage: NexusGenRootTypes['CreateMessagePayload']; // CreateMessagePayload!
    invitePeople: NexusGenRootTypes['InvitePeoplePayload']; // InvitePeoplePayload!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    removePeople: NexusGenRootTypes['RemovePeoplePayload']; // RemovePeoplePayload!
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Participant: { // field return type
    conversation: NexusGenRootTypes['Conversation']; // Conversation!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
  }
  ParticipantConnection: { // field return type
    edges: Array<NexusGenRootTypes['ParticipantEdge'] | null> | null; // [ParticipantEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  ParticipantEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Participant']; // Participant!
  }
  Query: { // field return type
    conversationConnection: NexusGenRootTypes['ConversationConnection']; // ConversationConnection!
    node: NexusGenRootTypes['Node']; // Node!
    nodes: NexusGenRootTypes['Node'][]; // [Node!]!
    userConnection: NexusGenRootTypes['UserConnection']; // UserConnection!
  }
  RemovePeoplePayload: { // field return type
    conversation: NexusGenRootTypes['Conversation']; // Conversation!
    conversationId: string; // ID!
    participantIds: string[]; // [ID!]!
  }
  Subscription: { // field return type
    conversation: NexusGenRootTypes['ConversationSubscriptionPayload']; // ConversationSubscriptionPayload!
  }
  User: { // field return type
    avatar: string | null; // String
    conversationConnection: NexusGenRootTypes['ConversationConnection']; // ConversationConnection!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // ID!
    name: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UserConnection: { // field return type
    edges: Array<NexusGenRootTypes['UserEdge'] | null> | null; // [UserEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  UserEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['User']; // User!
  }
  Node: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenArgTypes {
  Conversation: {
    messageConnection: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
    participantConnection: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Mutation: {
    createConversation: { // args
      input: NexusGenInputs['CreateConversationInput']; // CreateConversationInput!
    }
    createMessage: { // args
      input: NexusGenInputs['CreateMessageInput']; // CreateMessageInput!
    }
    invitePeople: { // args
      input: NexusGenInputs['InvitePeopleInput']; // InvitePeopleInput!
    }
    login: { // args
      input: NexusGenInputs['LoginInput']; // LoginInput!
    }
    removePeople: { // args
      input: NexusGenInputs['RemovePeopleInput']; // RemovePeopleInput!
    }
    signup: { // args
      input: NexusGenInputs['SignupInput']; // SignupInput!
    }
  }
  Query: {
    conversationConnection: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
    node: { // args
      id: string; // ID!
    }
    nodes: { // args
      ids: string[]; // [ID!]!
    }
    userConnection: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  User: {
    conversationConnection: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
  Node: "Conversation" | "Message" | "Participant" | "User"
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthPayload" | "Conversation" | "ConversationConnection" | "ConversationEdge" | "ConversationSubscriptionPayload" | "CreateConversationPayload" | "CreateMessagePayload" | "InvitePeoplePayload" | "Message" | "MessageConnection" | "MessageEdge" | "Mutation" | "PageInfo" | "Participant" | "ParticipantConnection" | "ParticipantEdge" | "Query" | "RemovePeoplePayload" | "Subscription" | "User" | "UserConnection" | "UserEdge";

export type NexusGenInputNames = "CreateConversationInput" | "CreateMessageInput" | "InvitePeopleInput" | "LoginInput" | "RemovePeopleInput" | "SignupInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = "Node";

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ctx.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
}